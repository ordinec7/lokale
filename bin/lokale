#!/usr/bin/env ruby

require 'lokale'
require 'lokale/find_dir'
require 'lokale/colorize'
require 'lokale/options'

Settings.init

git_path = find_git_repo
if git_path.nil? 
	puts "Could not find any git repository."
	exit
end

project_name = xcode_project_name(git_path)
if project_name.nil?
	puts "Found git repository (#{git_path}) does not contain an Xcode project."
	exit
end

puts "Target Xcode project: '#{project_name}'".green

########################################################################################

class Action
	def perform(agent, reporter)
		send(("perform_" + @type.to_s).to_sym, agent, reporter)
	end

	def perform_summary(agent, reporter)
		puts "Printing summary".blue
		reporter.print_summary
	end

	def perform_copy_base(agent, reporter)
		puts "Copying `en` strings files to `Base`".blue
		agent.copy_base
		puts
	end

	def perform_append(agent, reporter)

	end
end



settings = Settings.get

macros = [
    Lokale::Macro.new("NSLocalizedString", /NSLocalizedString\("(.+?)",\s*comment:\s*"(.*?)"\)/, "Localizable.strings"), 
    Lokale::Macro.new("PluralString", /String.localizedPlural\("(.+?)"/, nil),
    #LocalizationMacro.new("ObjC String", /NSLocalizedString\("(.*)",\s*(.*)\)/),
    #LocalizationMacro.new("ObjC Table String", /NSLocalizedStringFromTableInBundle\((.*?),/)
]

agent = Lokale::Agent.new(git_path, macros)
reporter = Lokale::Reporter.new(agent)


settings.actions.each do |action|
	action.perform(agent, reporter)
end
